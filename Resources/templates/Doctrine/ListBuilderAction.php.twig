{% extends '../CommonAdmin/ListAction/ListBuilderAction.php.twig' %}
{% block setFilters -%}
    /**
     * Store in the session service the current filters
     *
     * @param array the filters
     */
    protected function setFilters(array $filters)
    {
        {%- for filter,column in builder.filterColumns -%}
            {%- if 'entity' == builder.getFieldGuesser().getDbType(model, column.filterOn) or 'collection' == builder.getFieldGuesser().getDbType(model, column.filterOn) -%}
            {% set filterModel = builder.getFieldGuesser().getModelType(model, column.filterOn) %}
        if (isset($filters['{{ filter }}'])) {
                $filters['{{ filter }}'] = array (
                    '{{ builder.getFieldGuesser().getModelPrimaryKeyName(filterModel) }}' => $filters['{{ filter }}']->get{{ builder.getFieldGuesser().getModelPrimaryKeyName(filterModel)|capitalize }}(),
                    'entityName' => '{{ filterModel }}'
                );
        }
            {%- endif %}
        {% endfor -%}

        $this->get('session')->set($this->getSessionPrefix().'List\Filters', $filters);
    }
{% endblock %}

{% block getFilters -%}
    /**
     * Get filters from session
     */
    protected function getFilters()
    {
        $filters = $this->get('session')->get($this->getSessionPrefix().'List\Filters', array());

        {%- for filter,column in builder.filterColumns -%}
            {%- if 'entity' == builder.getFieldGuesser().getDbType(model, column.filterOn) or 'collection' == builder.getFieldGuesser().getDbType(model, column.filterOn) -%}
            {% set filterModel = builder.getFieldGuesser().getModelType(model, column.filterOn) %}
        if (isset($filters['{{ filter }}'])) {
                $filters['{{ filter }}'] = $this->getDoctrine()
                ->getManagerForClass($filters['{{ filter }}']['entityName'])
                ->getRepository($filters['{{ filter }}']['entityName'])->find($filters['{{ filter }}']['{{ builder.getFieldGuesser().getModelPrimaryKeyName(filterModel) }}']);
        }
            {%- endif %}
        {% endfor -%}

        return $filters;
    }
{% endblock %}

{% block getQuery -%}
    protected function getQuery()
    {
        $query = $this->buildQuery();

        $this->processQuery($query);
        $this->processSort($query);
        $this->processScopes($query);
        $this->processFilters($query);

        return $query->getQuery();
    }

    protected function buildQuery()
    {
        return $this->getDoctrine()
                    ->getManagerForClass('{{ model }}')
                    ->getRepository('{{ model }}')
                    ->createQueryBuilder('q');
    }
{% endblock %}

{% block processSort -%}
    protected function processSort($query)
    {
        if ($this->getSortColumn()) {
            if (!strstr($this->getSortColumn(), '.')) { //direct column
                $query->orderBy('q.'.$this->getSortColumn(), $this->getSortOrder());
            } else {
                list($table, $column) = explode('.', $this->getSortColumn(), 2);
                $this->addJoinFor($table, $query);
                $query->orderBy($this->getSortColumn(), $this->getSortOrder());
            }
        }
    }
{% endblock %}

{% block getFilterForm -%}
    protected function getFilterForm()
    {
        $filters = $this->getFilters();

        {%- for filter,column in builder.filterColumns -%}
            {%- if 'entity' == builder.getFieldGuesser().getDbType(model, column.filterOn) or 'collection' == builder.getFieldGuesser().getDbType(model, column.filterOn) -%}
            {% set filterModel = builder.getFieldGuesser().getModelType(model, column.filterOn) %}
              if (isset($filters['{{ filter }}'])) {
                  $this->getDoctrine()
                  ->getManagerForClass(get_class($filters['{{ filter }}']))
                  ->getUnitOfWork()
                  ->registerManaged($filters['{{ filter }}'], array('{{ builder.getFieldGuesser().getModelPrimaryKeyName(filterModel) }}' => $filters['{{ filter }}']->get{{ builder.getFieldGuesser().getModelPrimaryKeyName(filterModel)|capitalize }}()), array());
              }

            {%- endif %}

        {% endfor -%}

        return $this->createForm($this->getFiltersType(), $filters, array_merge(
            $this->getFiltersOptions(),
            array('groups' => $this->getGroups())
        ));
    }
{% endblock %}

{% block addJoinFor -%}
    protected function addJoinFor($table, $query)
    {
        $query->leftJoin('q.'.$table, $table);
    }
{% endblock %}

{% block processFilters -%}
    protected function processFilters($query)
    {
        $filterObject = $this->getFilters();

        $queryFilter = $this->getQueryFilter();
        $queryFilter->setQuery($query);

    {% for filter,column in builder.filterColumns %}
        if (isset($filterObject['{{ column.name }}']) && null !== $filterObject['{{ column.name }}']) {
            $this->filter{{ filter|classify }}($queryFilter, $filterObject['{{ column.name }}']);
        }
    {% endfor %}
    }

    {% for filter,column in builder.filterColumns %}
    /**
     * Add filters to the query for {{ filter }}
     *
     * @param queryFilter The queryFilter
     * @param mixed The value
     */
    protected function filter{{ filter|classify }}($queryFilter, $value)
    {
        $queryFilter->add{{ builder.fieldGuesser().dbType(model, column.filterOn)|classify }}Filter('{{ column.filterOn }}', $value);
    }
    {% endfor %}
{% endblock %}


{% block getQueryFilter %}
    /**
     * @return \Admingenerator\GeneratorBundle\QueryFilter\QueryFilterInterface
     */
    protected function getQueryFilter()
    {
        return $this->get('admingenerator.queryfilter.doctrine');
    }
{% endblock %}
